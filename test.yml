- name: Playbook with Proxy
  hosts: localhost
  tasks:
    - name: Configure Proxy for Playbook
      shell: |
        export HTTP_PROXY=http://proxy-server.example.com:8080
        export HTTPS_PROXY=http://proxy-server.example.com:8080
        export HTTP_PROXY_USERNAME=username
        export HTTP_PROXY_PASSWORD=password
      environment:
        HTTP_PROXY: http://proxy-server.example.com:8080
        HTTPS_PROXY: http://proxy-server.example.com:8080
        HTTP_PROXY_USERNAME: username
        HTTP_PROXY_PASSWORD: password

---
- name: Install and Configure GitLab Runner
  hosts: your_target_hosts
  become: yes  # Use sudo to run commands as root

  tasks:
    - name: Set Environment Variables
      ansible.builtin.export:
        variable: GITLAB_DATA_DIR
        value: /home/gitlab-runner

    - name: Install Git
      ansible.builtin.yum:
        name: git
        state: present
        update_cache: yes

    - name: Download GitLab Runner
      ansible.builtin.get_url:
        url: https://gitlab-runner-downloads.s3.amazonaws.com/v12.4.1/binaries/gitlab-runner-linux-amd64
        dest: /usr/local/bin/gitlab-runner
        mode: '0755'

    - name: Create GitLab Runner User
      ansible.builtin.user:
        name: gitlab-runner
        comment: 'GitLab Runner'
        createhome: yes
        shell: /bin/bash

    - name: Create GitLab Data Directory
      ansible.builtin.file:
        path: "{{ GITLAB_DATA_DIR }}"
        state: directory
        owner: gitlab-runner
        group: root
        mode: '0777'

    - name: Install GitLab Runner
      ansible.builtin.command: gitlab-runner install --user eclapp --working-directory "{{ GITLAB_DATA_DIR }}"
      become: yes

    - name: Start GitLab Runner
      ansible.builtin.command: gitlab-runner start
      become: yes

    - name: Restart GitLab Runner
      ansible.builtin.command: gitlab-runner restart
      become: yes

    - name: Register GitLab Runner
      ansible.builtin.command: >
        gitlab-runner register \
          --non-interactive \
          --url "https://gitlab.verizon.com/" \
          --registration-token "CHANGE_TO_YOUR_GITLAB_CI_TOKEN" \
          --executor "shell" \
          --description "PROVIDE_DESCRIPTION" \
          --tag-list "PROVIDE_TAG" \
          --run-untagged "false" \
          --locked "false" \
          --access-level "not_protected"
      become: yes

    - name: Check GitLab Runner Status
      ansible.builtin.command: gitlab-runner status
      become: yes

    - name: Check GitLab Runner systemd unit status
      ansible.builtin.command: systemctl is-enabled gitlab-runner
      become: yes

    - name: Check Docker systemd unit status
      ansible.builtin.command: systemctl is-enabled docker
      become: yes

    - name: List GitLab Runners
      ansible.builtin.command: gitlab-runner list
      become: yes


---
- name: Create GitLab Data Directory
  hosts: your_target_host
  tasks:
    - name: Create GitLab Data Directory
      shell: mkdir -p "{{ GITLAB_DATA_DIR }}"
      become: yes
      become_user: gitlab-runner

- name: Install GitLab Runner
  hosts: your_target_host
  tasks:
    - name: Install GitLab Runner
      shell: gitlab-runner install
      become: yes
      become_user: gitlab-runner

- name: Start GitLab Runner
  hosts: your_target_host
  tasks:
    - name: Start GitLab Runner
      shell: gitlab-runner start
      become: yes
      become_user: gitlab-runner
      environment:
        HOME: "{{ GITLAB_DATA_DIR }}"

- name: Restart GitLab Runner
  hosts: your_target_host
  tasks:
    - name: Restart GitLab Runner
      shell: gitlab-runner restart
      become: yes


---
- name: Register GitLab Runner
  hosts: your_target_host
  tasks:
    - name: Register GitLab Runner
      shell: >
        gitlab-runner register \
        --non-interactive \
        --url "https://gitlab.verizon.com/" \
        --registration-token "{{ Token }}" \
        --executor "shell" \
        --description "J8BV-runner" \
        --tag-list "J8BV-runner" \
        --run-untagged "false" \
        --locked "false" \
        --access-level "not protected"
      become: yes

- name: Check GitLab Runner Status
  hosts: your_target_host
  tasks:
    - name: Check GitLab Runner Status
      shell: gitlab-runner status
      become: yes

- name: Check GitLab Runner systemd unit status
  hosts: your_target_host
  tasks:
    - name: Check GitLab Runner systemd unit status
      shell: systemctl is-enabled gitlab-runner
      become: yes

- name: Check Docker systemd unit status
  hosts: your_target_host
  tasks:
    - name: Check Docker systemd unit status
      shell: systemctl is-enabled docker
      become: yes

      become_user: gitlab-runner
      environment:
        HOME: "{{ GITLAB_DATA_DIR }}"

------------------------------------------------------------------------------------
---
- name: Clone Git repository, install npm packages, and start Node.js app
  hosts: your_target_hosts
  become: yes
  become_user: your_remote_user  # Replace with the remote user on the target hosts
  vars:
    git_username: your_git_username
    git_password: your_git_password
  tasks:
    - name: Clone Git repository
      git:
        repo: https://{{ git_username }}:{{ git_password }}@github.com/your/repo.git
        dest: /path/to/destination  # Replace with the desired destination directory
        force: yes

    - name: Install npm packages
      shell: npm install
      args:
        chdir: /path/to/destination  # Specify the same destination directory as above

    - name: Install pm2 globally
      shell: npm install -g pm2

    - name: Start Node.js application with pm2
      shell: pm2 start server.js
      args:
        chdir: /path/to/destination  # Specify the same destination directory as above


wget https://downloads.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz
sudo tar -xf apache-maven-3.8.4-bin.tar.gz -C /opt
export M2_HOME=/opt/apache-maven-3.8.4  # Adjust the version number if necessary
export M2=$M2_HOME/bin
export PATH=$M2:$PATH
source ~/.bashrc
mvn -version

wget https://downloads.apache.org/ant/binaries/apache-ant-X.Y.Z-bin.tar.gz
sudo mkdir -p /opt/ant
sudo tar -xzvf apache-ant-X.Y.Z-bin.tar.gz -C /opt/ant --strip-components=1
export ANT_HOME="/opt/ant"
export PATH="$ANT_HOME/bin:$PATH"
source ~/.bashrc
ant -version
# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update package lists and install dependencies
RUN apt-get update && apt-get install -y firefox-geckodriver

