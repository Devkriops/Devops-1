#!/bin/bash

#Define vars.................................................................
TARGETVERSION="18.2.7.1"
RPMNAME="chef-18.2.7-1.el7.x86_64.rpm"

#Env variable ...............................................................

IP=$(hostname -I | awk '{print $1}')
ipsplit() { local IFS=.; echo $*; }
 set -- `ipsplit $IP`
#echo $1
#echo $2
#echo $3
#echo $4

if [ $3 -eq "1" ] && [ $2 -eq "4" ]; then
	echo env twa-pdmz
	env1="twa-pdmz"
	echo $env1
elif [ $3 -eq "1" ]; then
	echo env twa-pdmz
	env1="twa-pdmz"
	echo $env1
elif [ $3 -eq "3" ] && [ $4 -ge "5" ] && [ $4 -le "126" ]; then
	echo env tws-pdmz
	env1="tws-pdmz"
	echo $env1
elif [ $3 -eq "3" ] && [ $4 -ge "130" ] && [ $4 -le "254" ]; then
	echo env tws-npdmz
	env1="tws-npdmz"
	echo $env1
elif [ $3 -eq "33" ]; then
	echo env twa-pllzdmz
	env1="twa-pllzdmz"
	echo $env1
elif [ $3 -eq "34" ]; then
	echo env twa-pllz
	env1="twa-pllz"
	echo $env1
elif [ $3 -eq "35" ]; then
	echo env tws-pllz
	env1="tws-pllz"
	echo $env1
elif [ $3 -eq "108" ] && [ $4 -ge "4" ] && [ $4 -le "126" ]; then
	echo env twa-mgmt
	env1="twa-mgmt"
	echo $env1
elif [ $3 -eq "108" ] && [ $4 -ge "139" ] && [ $4 -le "244" ]; then
	echo env tws-mgmt
	env1="tws-mgmt"
	echo $env1
elif [ $3 -eq "110" ]; then
	echo env dev
	env1="dev"
	ISPROD=NO
	echo $env1
elif [ $3 -eq "111" ]; then
    echo env qa
	env1="qa"
	ISPROD=NO
	echo $env1
elif [ $3 -eq "112" ]; then
    echo env tws-prod
	env1="tws-prod"
	echo $env1
elif [ $3 -eq "113" ]; then
	echo env twa-prod
	env1="twa-prod"
	echo $env1
elif [ $3 -eq "115" ]; then
	echo env trw-prod
	env1="trw-prod"
	echo $env1
elif [ $3 -eq "116" ]; then
	echo env qa
	env1="qa"
	ISPROD=NO
	echo $env1
elif [ $3 -eq "118" ]; then
	echo env training
	env1="training"
	ISPROD=NO
	echo $env1
elif [ $3 -eq "123" ]; then
	echo env qa
	env1="qa"
	echo $env1
elif [ $3 -eq "124" ]; then
	echo env dev
	env1="dev"
	echo $env1
else
	echo env non-prod
	env1="non-prod"
	ISPROD=NO
	echo $env1
fi


#Set up FUNCTIONS............................................................

PREP () {
#Yum install package.........................................................

if ! rpm -qa | grep -qw unzip; then
    yum --quiet install unzip -y
fi

#create a directory..........................................................

directory_name="/tmp/chef"

if [ -d $directory_name ]
then
    echo "Directory already exists"
else
    mkdir $directory_name
fi


# Change directory to /tmp/chef
cd /tmp/chef

# Check if chef client .zip exists in the /tmp/chef folder
if [ -f "linux-${TARGETVERSION}.zip" ]; then
    echo "linux-${TARGETVERSION}.zip found. Proceeding to unzip..."
else
    echo "test.zip not found in /tmp/chef folder. Exiting script."
    exit 1
fi

unzip ./linux-${TARGETVERSION}.zip > /dev/null 2>&1
cd /tmp/chef/linux
pwd
}


SETUPCONFIGS () {
mkdir /etc/chef 2>/dev/null
cd /tmp/chef/linux
/usr/bin/cp -f ./cacert.pem /opt/chef/embedded/ssl/certs/
/usr/bin/cp -f ./triwest-validator.pem /etc/chef
 
#replace env variable client.rb file.........................................

sed -i "s|env1|$env1|g" "./client.rb"
cp -f ./client.rb /etc/chef/
}


RUNCHEF () {
#Execute chef-client.........................................................
chef-client --chef-license=accept -r role[$env1]
#............................................................................
}


SETUPCRON () {
if [[ ! -f /etc/cron.d/chef_client ]]; then
mkdir -p /opt/cheflog 2>/dev/null
touch /opt/cheflog/chef_client.log
chmod 644 /opt/cheflog/chef_client.log
cat <<EOF > /etc/cron.d/chef_client
PATH=/usr/local/bin:/usr/bin:/bin
# m h dom mon dow user command
*/15 * * * * root chef-client -L /opt/cheflog/chef_client.log | grep -v 'retrying [1234]/5 in'
EOF
chmod 0644 /etc/cron.d/chef_client
fi
}


CLEANUP () {
#Remove chef folder
cd ~
rm -rf /tmp/chef
}


#EXECUTE.....................................................................

rpm -qa | grep -q chef
if [[ $? -eq 0 ]]; then
#INSTALLED-CHECK VERSION
 CURRENTVERSION=$(chef-client -version | awk '{print $4}' | cut -f1-2 -d'.')
 if [[ $TARGETVERSION == $CURRENTVERSION ]]; then
 #RIGHT VERSION
# if [[ "$ISPROD" == "NO" ]]; then
  SETUPCRON
# fi
 else 
 #NOT RIGHT VERSION
  PREP
  rpm -U --quiet $RPMNAME
  SETUPCONFIGS
# if [[ "$ISPROD" == "NO" ]]; then
  SETUPCRON
# fi
  CLEANUP
 fi
else
#NOT INSTALLED
 PREP
 rpm -i --quiet $RPMNAME
 SETUPCONFIGS
 RUNCHEF
# if [[ "$ISPROD" == "NO" ]]; then
  SETUPCRON
# fi
 CLEANUP
fi
