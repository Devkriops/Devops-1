
# Use the Red Hat Universal Base Image (UBI) as the base image
FROM registry.access.redhat.com/ubi8/ubi

# Install necessary packages
RUN yum install -y \
    ca-certificates \
    yum-utils \
    gnupg2 \
    wget \
    && yum clean all \
    && rm -rf /var/cache/yum

# Add JFrog CLI repository
RUN echo "[jfrog-cli]" > /etc/yum.repos.d/jfrog-cli.repo \
    && echo "name=jfrog-cli" >> /etc/yum.repos.d/jfrog-cli.repo \
    && echo "baseurl=https://releases.jfrog.io/artifactory/jfrog-rpms" >> /etc/yum.repos.d/jfrog-cli.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/jfrog-cli.repo

# Import JFrog GPG key
RUN rpm --import https://releases.jfrog.io/artifactory/jfrog-gpg-public/jfrog_public_gpg.key

# Install JFrog CLI
RUN yum install -y jfrog-cli-v2-jf

# Set the entry point to JFrog CLI
ENTRYPOINT ["jfrog"]



#!/bin/bash

# Assign parameters to variables
server_id="$SERVER_ID"
url="$URL"
user="$USER"
password="$PASSWORD"
interactive="$INTERACTIVE"

# Check if any parameter is empty
if [ -z "$server_id" ] || [ -z "$url" ] || [ -z "$user" ] || [ -z "$password" ] || [ -z "$interactive" ]; then
    echo "All parameters must be provided."
    exit 1
fi

# Replace the password with a placeholder string
masked_password="*****"

# Echo the command with the provided parameters (with the password masked)
echo "jf c add \"$server_id\" --url=\"$url\" --user=\"$user\" --password=\"$masked_password\" --interactive=\"$interactive\""

# Execute the command with the provided parameters
jf c add "$server_id" --url="$url" --user="$user" --password="$password" --interactive="$interactive"


docker run -e SERVER_ID="your_server_id" -e URL="your_url" -e USER="your_user" -e PASSWORD="your_password" -e INTERACTIVE="false" your_image_name


#!/bin/bash

# Set the URL variable
url="https://www.google.com:8080/"

# Extract domain using awk
domain=$(echo "$url" | awk -F[/:] '{print $4}')

# Print the extracted domain
echo "$domain"



# Path to your config file
config_file="/path/to/your/config/file.conf"

# Check if the config file exists
if [ ! -f "$config_file" ]; then
    echo "Config file does not exist: $config_file"
    exit 1
fi

# Use sed to replace values in the config file
sed -i "s/^zap.target=.*/zap.target=$target/" "$config_file"
sed -i "s/^zap.produrl=.*/zap.produrl=$produrl/" "$config_file"
sed -i "s/^zap.vastid=.*/zap.vastid=$vastid/" "$config_file"
sed -i "s|^zap.contextpath=.*|zap.contextpath=/apps/context/$vastid.context|" "$config_file"

    stages {
        stage('Pull Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'your-docker-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        // Log in to the Docker registry
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY"
                        
                        // Pull the Docker image
                        sh "docker pull $DOCKER_REGISTRY/your-image:tag"  // Replace with your image and tag
                    }
                }
            }
        }

