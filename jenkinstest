def paramInfo = ''
properties([
    parameters([

    string(name: 'hostname', defaultValue: 'hostname1', description: 'Hostname for target provisioned server. Can also provide a comma delimited sequence of hostnames, for example hostname1, hostname2, hostname3'),
    [$class: 'ChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select the Env Name from the Dropdown List', 
        filterLength: 1, 
        filterable: false, 
        name: 'blueprint', 
        randomName: 'choice-parameter-5631314439613978', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Env\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return["TriWest RHEL7", "TriWest RHEL7-HTTPD-Secure-Placeholder", "TriWest RHEL7-Java8-Secure-Placeholder", "TriWest RHEL7-Java8-Tomcat-Secure"]'
            ]
        ]
    ], 
    [$class: 'ChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select the Env Name from the Dropdown List', 
        filterLength: 1, 
        filterable: false, 
        name: 'group', 
        randomName: 'choice-parameter-5631314439613978', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Env\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return["tws", "twa"]'
            ]
        ]
    ], 
    [$class: 'CascadeChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select Servers', 
        filterLength: 1, 
        filterable: false, 
        name: 'environment', 
        randomName: 'choice-parameter-5631314456178620', 
        referencedParameters: 'group', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Environment from group Param\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    ''' if (group.equals("tws"))
                        { 
                        return ["TRW-SCG-BLD-TWS-Non-Prod-C4", "TRW-SCG-BLD-TWS-Non-Prod-Dedicated-C4", "TRW-SCG-BLD-TWS-Prod-C4", "TRW-SCG-BLD-TWS-Prod-Dedicated-C4", "TRW-SCG-RTP-TWS-Prod-C4"] } 
                        else if(group.equals("twa"))
                        { 
                        return ["TRW-SCG-BLD-TWA-Prod-C4", "TRW-SCG-BLD-TWA-Prod-Dedicated-C4", "TRW-SCG-BLD-TWA-Non-Prod-C4", "TRW-SCG-BLD-TWA-LLZ-C4"] }
                        else {return ["select the right environment"] }
                    '''
            ]
        ]
    ],
    [$class: 'CascadeChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select Servers', 
        filterLength: 1, 
        filterable: false, 
        name: 'target', 
        randomName: 'choice-parameter-5631314456178619', 
        referencedParameters: 'group', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Environment from group Param\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    ''' if (group.equals("tws"))
                        { 
                        return['TWS Dev DB', "TWS Dev App", "TWS-Dev-Presentation", "TWS Performance App", "TWS Performance DB", "TWS Performance Presentation", "TWS Sandbox App", "TWS Sandbox DB", "TWS Sandbox Presentation", "TWS QA App", "TWS QA DB", "TWS QA Presentation", "TWS Training App", "TWS Training DB", "TWS Training Presentation"] } 
                        else if(group.equals("twa"))
                        { 
                        return ["TWA LZ DMZ App", "TWA LZ DMZ Presentation", "TWA LZ App", "TWA LZ DB", "TWA LZ Presentation"] }
                        else {return ["select the right target"] }
                    '''
            ]
        ]  
    ], 
     [$class: 'ChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select the Env Name from the Dropdown List', 
        filterLength: 1, 
        filterable: false, 
        name: 'serversize', 
        randomName: 'choice-parameter-5631314439613978', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Env\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return["Large", "SM-Medium", "Small", "large", "XLarge", "Medium"]'
            ]
        ]
    ], 
    [$class: 'ChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Select the Env Name from the Dropdown List', 
        filterLength: 1, 
        filterable: false, 
        name: 'osbuilds', 
        randomName: 'choice-parameter-5631314439613978', 
        script: [
            $class: 'GroovyScript', 
            fallbackScript: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return[\'Could not get Env\']'
            ], 
            script: [
                classpath: [], 
                sandbox: false, 
                script: 
                    'return["RHEL7 CIS1 C4", "RHEL7 CIS2 C4"]'
            ]
        ]
    ]
])
])

pipeline {
    agent {label 'master'}
    stages {
        stage("Initialize") {
            steps{
                script {
                    
					echo 'Initialization start ------------------------------------------------------------'
					paramInfo = "\n parameter -----------------------\n"
					paramInfo += "\t group        = ${params.group} \n"
					paramInfo += "\t environment         = ${params.environment} \n"
					paramInfo += "\t blueprint  = ${params.blueprint} \n"
					paramInfo += "\t osbuilds       = ${params.osbuilds} \n"
					paramInfo += "\t target         = ${params.target} \n"
					paramInfo += "\t serversize         = ${serversize} \n"
					echo "${paramInfo}"
                }
            }
        }
        stage('Hello') {
            steps {
                echo 'Hello World'
                script{
                        if ("${params.group}" == "tws") {
                                groupid = "GRP-zl1ahm0i" }
                            // echo 'selected TWS' }
                            else if ("${params.group}" == "twa") {
                            groupid = "GRP-u72u8fmc"
                            // echo 'selected TWA'
                            }

                            if ("${params.environment}" == "TRW-SCG-BLD-TWA-LLZ-C4") {
                                environmentid = "ENV-2afoy705" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Non-Prod-C4") {
                                environmentid = "ENV-rundeuhw" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Prod-C4") {
                                environmentid = "ENV-ggyyh2ho" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Prod-Dedicated-C4") {
                                environmentid = "ENV-6ltcwvme" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Non-Prod-C4") {
                                environmentid = "ENV-398edsug" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Non-Prod-Dedicated-C4") {
                                environmentid = "ENV-rj2ch0fv" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Prod-C4") {
                                environmentid = "ENV-ql1w0iyi" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Prod-Dedicated-C4") {
                                environmentid = "ENV-xn3px3kc"
                            }

                            if ("${params.environment}" == "TRW-SCG-BLD-TWA-LLZ-C4") {
                                datastore = "TWA_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Non-Prod-C4") {
                                datastore = "TWS_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Prod-C4") {
                                datastore = "1_TWA_DS_Cluster_Replicated, TWA_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWA-Prod-Dedicated-C4") {
                                datastore = "1_TWA_DS_Cluster_Replicated, TWA_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Non-Prod-C4") {
                                datastore = "TWS_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Non-Prod-Dedicated-C4") {
                                datastore = "TWS_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Prod-C4") {
                                datastore = "_TWS_DS_Cluster_Replicated, TWS_DS_Cluster" }
                            else if ("${params.environment}" == "TRW-SCG-BLD-TWS-Prod-Dedicated-C4") {
                                datastore = "1_TWS_DS_Cluster_Replicated, TWS_DS_Cluster"
                            }


                            
                            if ("${params.blueprint}" == "TriWest RHEL7") {
                                blueprintid = "BP-joxc1mjz" }
                            else if ("${params.blueprint}" == "TriWest RHEL7-HTTPD-Secure-Placeholder") {
                                blueprintid = "BP-h35dwc3z" }
                            else if ("${params.blueprint}" == "TriWest RHEL7-Java8-Secure-Placeholder") {
                                blueprintid = "BP-a54z0957" }
                            else if ("${params.blueprint}" == "TriWest RHEL7-Java8-Tomcat-Secure") {
                                blueprintid = "BP-56547s6i"
                            }
                            if ("${params.osbuilds}" == "RHEL7 CIS1 C4") {
                                osbuildid = "OSB-n6tstevw" }
                            else if ("${params.osbuilds}" == "RHEL7 CIS2 C4") {
                                osbuildid = "OSB-bp7hnpfi"
                            }
                    echo "$hostname"
                    echo "$blueprintid"
                    echo "$groupid"
                    echo "$environmentid"
                    echo "$target"
                    echo "$serversize"
                    echo "$osbuildid"
                }
            }
        }
        stage('Provison Server') {
            steps {
                withEnv(["hostname=$hostname", "blueprintid=$blueprintid", "groupid=$groupid", "environmentid=$environmentid", "target=$target", "serversize=$serversize", "osbuildid=$osbuildid", "datastore=$datastore" ]) {
                    script {
                        try {
                            sh('''
                            export https_proxy=10.3.6.30:8080
                            bt=$(curl --location --request POST 'https://triwest.fdc.ibm.com/api/v2/api-token-auth/' --data-urlencode 'username=adminkpippala' --data-urlencode 'password=Pippallakrishn@658' --data-urlencode 'domain=triwest.com' | grep \"token\" | cut -d: -f2 | sed 's/\"//g' | sed 's/}//g')
                            order_response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${bt}" -d '
                            {
                                "group": "/api/v2/groups/'$groupid'/",
                                "items": {
                                    "deploy-items": [
                                        {
                                            "blueprint": "/api/v2/blueprints/'$blueprintid'/",
                                            "blueprint-items-arguments": {
                                                "build-item-Add NSX Tags": {},
                                                "build-item-Linux Join To Domain": {},
                                                "build-item-PAM Configure End": {},
                                                "build-item-PAM Configure Start": {},
                                                "build-item-Puppet Agent Installation": {},
                                                "build-item-SCG RHEL7 Server": {
                                                    "attributes": {
                                                        "hostname": "'$hostname'"
                                                    },
                                                    "environment": "/api/v2/environments/'$environmentid'/",
                                                    "os-build": "/api/v2/os-builds/'$osbuildid'/",
                                                    "parameters": {
                                                        "custom-size-trigger": "False",
                                                        "gb-param-puppet-lifecycle": "prod",
                                                        "order-complete-email": "False",
                                                        "simple-vm-size": "'$serversize'",
                                                        "trw-target-destination":"${params[target]}",
                                                        "change-vmware-disk-type": "False"
                                                    }
                                                },
                                                "build-item-SSH Public Key": {},
                                                "build-item-SSHD Settings": {},
                                                "build-item-Secure Linux Update": {},
                                                "build-item-Set SCG Server Parameters": {},
                                                "build-item-TRW PAM Settings": {},
                                                "build-item-TRW SSSD Settings": {},
                                                "build-item-VMWare NIC Configure": {
                                                    "parameters": {
                                                        "connect-at-power-on-a991": "True",
                                                        "direct-path-io-a991": "True",
                                                        "reservation-limit-a991": "0",
                                                        "share-priority-a991": "50",
                                                        "speed-limit-a991": "1000"
                                                    }
                                                },
                                                "build-item-YUM Update Exclude": {}
                                            },
                                            "resource-name": "",
                                            "resource-parameters": {}
                                        }
                                    ]
                                },
                                "submit-now": "true"
                            }' --insecure https://triwest.fdc.ibm.com/api/v2/orders/)
                            echo "Req hostname==> "$hostname
                            echo "Req blueprintid==> "$blueprintid
                            echo "Req groupid==> "$groupid
                            echo "Req environmentid==> "$environmentid
                            echo "Req target==> "$target
                            echo "Req serversize==> "$serversize
                            echo "Req osbuildid==> "$osbuildid
                            echo "Req token==> ${bt}"
                            echo "Rsp provision_order_rsp==> " $order_response
                            ''')
                        
                        }
                        catch(Exception e) {         
                        }
                    }
                }            
            }           
        }
		stage('Deployment') {
            steps {
                echo 'Deployment start ------------------------------------------------------------'
                script {
                    echo "chef"
                //build job: 'chef-install', parameters: [[ $class: 'StringParameterValue', name: 'hostname', value: "${params.hostname}"]], wait: true
                }
            }
        }
    }
}
