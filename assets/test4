#!/bin/bash

# Function to check status and extract fields
check_status() {
    local status_output=$(wget -qO- "https://onesecurity.verizon.com/onesecurity/rest/v1/cicd/gating/*/passthrough/$UUID")
    local status=$(echo "$status_output" | jq -r '.status')
    local critical=$(echo "$status_output" | jq -r '.critical')
    local high=$(echo "$status_output" | jq -r '.high')
    local medium=$(echo "$status_output" | jq -r '.medium')
    local low=$(echo "$status_output" | jq -r '.low')
    
    echo "Status: $status"
    echo "Critical: $critical"
    echo "High: $high"
    echo "Medium: $medium"
    echo "Low: $low"
    
    if [[ "$critical" -ne 0 || "$high" -ne 0 ]]; then
        echo "Scanning has critical and high vulnerabilities"
        exit 1
    fi
}

# If security flag is set to true
if [[ "$security_flag" == "true" ]]; then
    # Generate UUID
    UUID=$(wget -qO- https://onesecurity.verizon.com/onesecurity/rest/v1/cicd/uuid)

    # Update job.properties file with UUID
    sed -i "s|^project\.passthrough=.*$|project\.passthrough=$UUID|g" job.properties

    # Initialize start time
    start_time=$(date +%s)

    # Check status until it's success or 1 hour has passed
    while true; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))
        if (( elapsed_time >= 3600 )); then
            echo "Scanning is still processing after 1 hour"
            break
        fi
        
        check_status
        
        if [[ "$(check_status | jq -r '.status')" == "success" ]]; then
            break
        fi
        
        sleep 10 # Wait for 10 seconds before checking again
    done
else
    echo "Security flag is not set to true. Skipping security checks."
fi
